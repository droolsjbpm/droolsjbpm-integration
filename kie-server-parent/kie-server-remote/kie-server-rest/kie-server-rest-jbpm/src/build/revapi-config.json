{
  "filters": {
    "revapi": {
      "java": {
        "_comment": "Only classes with javax.ws.rs annotations are included since we want to check only REST API.",
        "filter": {
          "packages": {
            "comment": "We don't want to check transitive classes, e.g. from kie-server-api, since we already check them in their own module.",
            "regex": true,
            "include": [
              "org\\.kie\\.server\\.remote\\.rest\\.jbpm.*"
            ],
            "exclude": [
              "org\\.kie\\.server\\.remote\\.rest\\.jbpm\\.resources"
            ]
          },
          "classes": {
            "_comment": "Classes are excluded, not included, so new classes in future are discovered by revapi.",
            "regex": false,
            "exclude": [
              "org.kie.server.remote.rest.jbpm.JbpmRestApplicationComponentsService"
            ]
          }
        }
      }
    }
  },
  "ignores": {
    "revapi": {
      "_comment": "Changes between 7.5.0.Final and the current branch. These changes are desired and thus ignored.",
      "ignore": [
        {
          "code": "java.annotation.attributeValueChanged",
          "old": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.QueryDataResource::createQueryDefinition(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.String)",
          "new": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.QueryDataResource::createQueryDefinition(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.String)",
          "annotationType": "io.swagger.annotations.ApiOperation",
          "annotation": "@io.swagger.annotations.ApiOperation(value = \"Registers new query definition in the system with given queryName\", response = org.kie.server.api.model.definition.QueryDefinition.class, code = 201)",
          "attribute": "response",
          "oldValue": "java.lang.Void.class",
          "newValue": "org.kie.server.api.model.definition.QueryDefinition.class",
          "package": "org.kie.server.remote.rest.jbpm",
          "classSimpleName": "QueryDataResource",
          "methodName": "createQueryDefinition",
          "elementKind": "method",
          "justification": "JBPM-7103 - KIE Server custom queries exposed as DataSet editor in workbench"
        },
        {
          "code": "java.annotation.attributeValueChanged",
          "old": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.QueryDataResource::replaceQueryDefinition(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.String)",
          "new": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.QueryDataResource::replaceQueryDefinition(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.String)",
          "annotationType": "io.swagger.annotations.ApiOperation",
          "annotation": "@io.swagger.annotations.ApiOperation(value = \"Replaces existing query definition or registers new if not exists in the system with given queryName\", response = org.kie.server.api.model.definition.QueryDefinition.class, code = 201)",
          "attribute": "response",
          "oldValue": "java.lang.Void.class",
          "newValue": "org.kie.server.api.model.definition.QueryDefinition.class",
          "package": "org.kie.server.remote.rest.jbpm",
          "classSimpleName": "QueryDataResource",
          "methodName": "replaceQueryDefinition",
          "elementKind": "method",
          "justification": "JBPM-7103 - KIE Server custom queries exposed as DataSet editor in workbench"
        },
        {
          "code": "java.annotation.attributeValueChanged",
          "old": "parameter javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::getProcessesByFilter(javax.ws.rs.core.HttpHeaders, ===java.lang.String===, java.lang.Integer, java.lang.Integer, java.lang.String, boolean)",
          "new": "parameter javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::getProcessesByFilter(javax.ws.rs.core.HttpHeaders, ===java.lang.String===, java.lang.Integer, java.lang.Integer, java.lang.String, boolean)",
          "annotationType": "io.swagger.annotations.ApiParam",
          "annotation": "@io.swagger.annotations.ApiParam(value = \"process id or name to filter process definitions\", required = false)",
          "attribute": "required",
          "oldValue": "true",
          "newValue": "false",
          "package": "org.kie.server.remote.rest.jbpm",
          "classSimpleName": "RuntimeDataResource",
          "methodName": "getProcessesByFilter",
          "parameterIndex": "1",
          "elementKind": "parameter",
          "justification": "JBPM-7190: filter parameter is not a required param in Swagger definition"
        },
        {
          "code": "java.annotation.attributeValueChanged",
          "old": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.ProcessResource::getProcessInstanceHistory(javax.ws.rs.core.HttpHeaders, java.lang.String, long, java.lang.Boolean, java.lang.Boolean, java.lang.Integer, java.lang.Integer)",
          "new": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.ProcessResource::getProcessInstanceHistory(javax.ws.rs.core.HttpHeaders, java.lang.String, long, java.lang.Boolean, java.lang.Boolean, java.lang.Integer, java.lang.Integer)",
          "annotationType": "io.swagger.annotations.ApiResponses",
          "annotation": "@io.swagger.annotations.ApiResponses({@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Process Instance or Container Id not found\")})",
          "attribute": "value",
          "oldValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\")}",
          "newValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Process Instance or Container Id not found\")}",
          "package": "org.kie.server.remote.rest.jbpm",
          "classSimpleName": "ProcessResource",
          "methodName": "getProcessInstanceHistory",
          "elementKind": "method",
          "justification": "JBPM-7330: Enrich error messages from API REST"
        },
        {
          "code": "java.annotation.attributeValueChanged",
          "old": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.ProcessResource::getProcessInstancesByDeploymentId(javax.ws.rs.core.HttpHeaders, java.lang.String, java.util.List<java.lang.Integer>, java.lang.Integer, java.lang.Integer, java.lang.String, boolean)",
          "new": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.ProcessResource::getProcessInstancesByDeploymentId(javax.ws.rs.core.HttpHeaders, java.lang.String, java.util.List<java.lang.Integer>, java.lang.Integer, java.lang.Integer, java.lang.String, boolean)",
          "annotationType": "io.swagger.annotations.ApiResponses",
          "annotation": "@io.swagger.annotations.ApiResponses({@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Container Id not found\")})",
          "attribute": "value",
          "oldValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\")}",
          "newValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Container Id not found\")}",
          "package": "org.kie.server.remote.rest.jbpm",
          "classSimpleName": "ProcessResource",
          "methodName": "getProcessInstancesByDeploymentId",
          "elementKind": "method",
          "justification": "JBPM-7330: Enrich error messages from API REST"
        },
        {
          "code": "java.annotation.attributeValueChanged",
          "old": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.ProcessResource::getProcessesByDeploymentId(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer, java.lang.String, boolean)",
          "new": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.ProcessResource::getProcessesByDeploymentId(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer, java.lang.String, boolean)",
          "annotationType": "io.swagger.annotations.ApiResponses",
          "annotation": "@io.swagger.annotations.ApiResponses({@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Container Id not found\")})",
          "attribute": "value",
          "oldValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\")}",
          "newValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Container Id not found\")}",
          "package": "org.kie.server.remote.rest.jbpm",
          "classSimpleName": "ProcessResource",
          "methodName": "getProcessesByDeploymentId",
          "elementKind": "method",
          "justification": "JBPM-7330: Enrich error messages from API REST"
        },
        {
          "code": "java.annotation.attributeValueChanged",
          "old": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.ProcessResource::getVariableHistory(javax.ws.rs.core.HttpHeaders, java.lang.String, long, java.lang.String, java.lang.Integer, java.lang.Integer)",
          "new": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.ProcessResource::getVariableHistory(javax.ws.rs.core.HttpHeaders, java.lang.String, long, java.lang.String, java.lang.Integer, java.lang.Integer)",
          "annotationType": "io.swagger.annotations.ApiResponses",
          "annotation": "@io.swagger.annotations.ApiResponses({@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Process Instance or Container Id not found\")})",
          "attribute": "value",
          "oldValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\")}",
          "newValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Process Instance or Container Id not found\")}",
          "package": "org.kie.server.remote.rest.jbpm",
          "classSimpleName": "ProcessResource",
          "methodName": "getVariableHistory",
          "elementKind": "method",
          "justification": "JBPM-7330: Enrich error messages from API REST"
        },
        {
          "code": "java.annotation.attributeValueChanged",
          "old": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.ProcessResource::getVariablesCurrentState(javax.ws.rs.core.HttpHeaders, java.lang.String, long)",
          "new": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.ProcessResource::getVariablesCurrentState(javax.ws.rs.core.HttpHeaders, java.lang.String, long)",
          "annotationType": "io.swagger.annotations.ApiResponses",
          "annotation": "@io.swagger.annotations.ApiResponses({@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Process Instance or Container Id not found\")})",
          "attribute": "value",
          "oldValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\")}",
          "newValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Process Instance or Container Id not found\")}",
          "package": "org.kie.server.remote.rest.jbpm",
          "classSimpleName": "ProcessResource",
          "methodName": "getVariablesCurrentState",
          "elementKind": "method",
          "justification": "JBPM-7330: Enrich error messages from API REST"
        },
        {
          "code": "java.annotation.attributeValueChanged",
          "old": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::getProcessInstancesByDeploymentId(javax.ws.rs.core.HttpHeaders, java.lang.String, java.util.List<java.lang.Integer>, java.lang.Integer, java.lang.Integer, java.lang.String, boolean)",
          "new": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::getProcessInstancesByDeploymentId(javax.ws.rs.core.HttpHeaders, java.lang.String, java.util.List<java.lang.Integer>, java.lang.Integer, java.lang.Integer, java.lang.String, boolean)",
          "annotationType": "io.swagger.annotations.ApiResponses",
          "annotation": "@io.swagger.annotations.ApiResponses({@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Container Id not found\")})",
          "attribute": "value",
          "oldValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\")}",
          "newValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Container Id not found\")}",
          "package": "org.kie.server.remote.rest.jbpm",
          "classSimpleName": "RuntimeDataResource",
          "methodName": "getProcessInstancesByDeploymentId",
          "elementKind": "method",
          "justification": "JBPM-7330: Enrich error messages from API REST"
        },
        {
          "code": "java.annotation.attributeValueChanged",
          "old": "parameter javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::getTasksAssignedAsPotentialOwner(javax.ws.rs.core.HttpHeaders, java.util.List<java.lang.String>, ===java.util.List<java.lang.String>===, java.lang.String, java.lang.Integer, java.lang.Integer, java.lang.String, boolean, java.lang.String)",
          "new": "parameter javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::getTasksAssignedAsPotentialOwner(javax.ws.rs.core.HttpHeaders, java.util.List<java.lang.String>, ===java.util.List<java.lang.String>===, java.lang.String, java.lang.Integer, java.lang.Integer, java.lang.String, boolean, java.lang.String)",
          "annotationType": "io.swagger.annotations.ApiParam",
          "annotation": "@io.swagger.annotations.ApiParam(value = \"optional group names to include in the query\", required = false, allowMultiple = true)",
          "attribute": "required",
          "oldValue": "true",
          "newValue": "false",
          "package": "org.kie.server.remote.rest.jbpm",
          "classSimpleName": "RuntimeDataResource",
          "methodName": "getTasksAssignedAsPotentialOwner",
          "parameterIndex": "2",
          "elementKind": "parameter",
          "justification": "JBPM-7330: Enrich error messages from API REST"
        },
        {
          "code": "java.annotation.attributeValueChanged",
          "old": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.UserTaskResource::getTaskEvents(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Long, java.lang.Integer, java.lang.Integer, java.lang.String, boolean)",
          "new": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.UserTaskResource::getTaskEvents(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Long, java.lang.Integer, java.lang.Integer, java.lang.String, boolean)",
          "annotationType": "io.swagger.annotations.ApiResponses",
          "annotation": "@io.swagger.annotations.ApiResponses({@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Task with given id not found\")})",
          "attribute": "value",
          "oldValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\")}",
          "newValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Task with given id not found\")}",
          "package": "org.kie.server.remote.rest.jbpm",
          "classSimpleName": "UserTaskResource",
          "methodName": "getTaskEvents",
          "elementKind": "method",
          "justification": "JBPM-7330: Enrich error messages from API REST"
        },
        {
          "code": "java.annotation.attributeValueChanged",
          "old": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::getAllAuditTask(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer, java.lang.String, boolean)",
          "new": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.RuntimeDataResource::getAllAuditTask(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Integer, java.lang.Integer, java.lang.String, boolean)",
          "annotationType": "io.swagger.annotations.ApiOperation",
          "annotation": "@io.swagger.annotations.ApiOperation(value = \"Retrieves tasks with applied pagination\", response = org.kie.server.api.model.instance.TaskSummaryList.class, code = 200)",
          "attribute": "value",
          "oldValue": "\"Retrieves tasks, optionally filters by status and applies pagination\"",
          "newValue": "\"Retrieves tasks with applied pagination\"",
          "package": "org.kie.server.remote.rest.jbpm",
          "classSimpleName": "RuntimeDataResource",
          "methodName": "getAllAuditTask",
          "elementKind": "method",
          "justification": "Removed incorrect description of endpoint"
        },
        {
          "code": "java.annotation.attributeValueChanged",
          "old": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.UserTaskResource::claim(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Long, java.lang.String)",
          "new": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.UserTaskResource::claim(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Long, java.lang.String)",
          "annotationType": "io.swagger.annotations.ApiResponses",
          "annotation": "@io.swagger.annotations.ApiResponses({@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Task with given id not found\"), @io.swagger.annotations.ApiResponse(code = 403, message = \"User was unable to execute current operation on task with given id due to a no 'current status' match or insufficient permissions\")})",
          "attribute": "value",
          "oldValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Task with given id not found\")}",
          "newValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Task with given id not found\"), @io.swagger.annotations.ApiResponse(code = 403, message = \"User was unable to execute current operation on task with given id due to a no 'current status' match or insufficient permissions\")}",
          "package": "org.kie.server.remote.rest.jbpm",
          "classSimpleName": "UserTaskResource",
          "methodName": "claim",
          "elementKind": "method",
          "justification": "JBPM-7542: Create better response for user without permissions to do"
        },
        {
          "code": "java.annotation.attributeValueChanged",
          "old": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.UserTaskResource::complete(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Long, java.lang.String, boolean, java.lang.String)",
          "new": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.UserTaskResource::complete(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Long, java.lang.String, boolean, java.lang.String)",
          "annotationType": "io.swagger.annotations.ApiResponses",
          "annotation": "@io.swagger.annotations.ApiResponses({@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Task with given id not found\"), @io.swagger.annotations.ApiResponse(code = 403, message = \"User was unable to execute current operation on task with given id due to a no 'current status' match or insufficient permissions\")})",
          "attribute": "value",
          "oldValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Task with given id not found\")}",
          "newValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Task with given id not found\"), @io.swagger.annotations.ApiResponse(code = 403, message = \"User was unable to execute current operation on task with given id due to a no 'current status' match or insufficient permissions\")}",
          "package": "org.kie.server.remote.rest.jbpm",
          "classSimpleName": "UserTaskResource",
          "methodName": "complete",
          "elementKind": "method",
          "justification": "JBPM-7542: Create better response for user without permissions to do"
        },
        {
          "code": "java.annotation.attributeValueChanged",
          "old": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.UserTaskResource::delegate(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Long, java.lang.String, java.lang.String)",
          "new": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.UserTaskResource::delegate(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Long, java.lang.String, java.lang.String)",
          "annotationType": "io.swagger.annotations.ApiResponses",
          "annotation": "@io.swagger.annotations.ApiResponses({@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Task with given id not found\"), @io.swagger.annotations.ApiResponse(code = 403, message = \"User was unable to execute current operation on task with given id due to a no 'current status' match or insufficient permissions\")})",
          "attribute": "value",
          "oldValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Task with given id not found\")}",
          "newValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Task with given id not found\"), @io.swagger.annotations.ApiResponse(code = 403, message = \"User was unable to execute current operation on task with given id due to a no 'current status' match or insufficient permissions\")}",
          "package": "org.kie.server.remote.rest.jbpm",
          "classSimpleName": "UserTaskResource",
          "methodName": "delegate",
          "elementKind": "method",
          "justification": "JBPM-7542: Create better response for user without permissions to do"
        },
        {
          "code": "java.annotation.attributeValueChanged",
          "old": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.UserTaskResource::forward(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Long, java.lang.String, java.lang.String)",
          "new": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.UserTaskResource::forward(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Long, java.lang.String, java.lang.String)",
          "annotationType": "io.swagger.annotations.ApiResponses",
          "annotation": "@io.swagger.annotations.ApiResponses({@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Task with given id not found\"), @io.swagger.annotations.ApiResponse(code = 403, message = \"User was unable to execute current operation on task with given id due to a no 'current status' match or insufficient permissions\")})",
          "attribute": "value",
          "oldValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Task with given id not found\")}",
          "newValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Task with given id not found\"), @io.swagger.annotations.ApiResponse(code = 403, message = \"User was unable to execute current operation on task with given id due to a no 'current status' match or insufficient permissions\")}",
          "package": "org.kie.server.remote.rest.jbpm",
          "classSimpleName": "UserTaskResource",
          "methodName": "forward",
          "elementKind": "method",
          "justification": "JBPM-7542: Create better response for user without permissions to do"
        },
        {
          "code": "java.annotation.attributeValueChanged",
          "old": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.UserTaskResource::nominate(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Long, java.lang.String, java.util.List<java.lang.String>)",
          "new": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.UserTaskResource::nominate(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Long, java.lang.String, java.util.List<java.lang.String>)",
          "annotationType": "io.swagger.annotations.ApiResponses",
          "annotation": "@io.swagger.annotations.ApiResponses({@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Task with given id not found\"), @io.swagger.annotations.ApiResponse(code = 403, message = \"User was unable to execute current operation on task with given id due to a no 'current status' match or insufficient permissions\")})",
          "attribute": "value",
          "oldValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Task with given id not found\")}",
          "newValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Task with given id not found\"), @io.swagger.annotations.ApiResponse(code = 403, message = \"User was unable to execute current operation on task with given id due to a no 'current status' match or insufficient permissions\")}",
          "package": "org.kie.server.remote.rest.jbpm",
          "classSimpleName": "UserTaskResource",
          "methodName": "nominate",
          "elementKind": "method",
          "justification": "JBPM-7542: Create better response for user without permissions to do"
        },
        {
          "code": "java.annotation.attributeValueChanged",
          "old": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.UserTaskResource::release(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Long, java.lang.String)",
          "new": "method javax.ws.rs.core.Response org.kie.server.remote.rest.jbpm.UserTaskResource::release(javax.ws.rs.core.HttpHeaders, java.lang.String, java.lang.Long, java.lang.String)",
          "annotationType": "io.swagger.annotations.ApiResponses",
          "annotation": "@io.swagger.annotations.ApiResponses({@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Task with given id not found\"), @io.swagger.annotations.ApiResponse(code = 403, message = \"User was unable to execute current operation on task with given id due to a no 'current status' match or insufficient permissions\")})",
          "attribute": "value",
          "oldValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Task with given id not found\")}",
          "newValue": "{@io.swagger.annotations.ApiResponse(code = 500, message = \"Unexpected error\"), @io.swagger.annotations.ApiResponse(code = 404, message = \"Task with given id not found\"), @io.swagger.annotations.ApiResponse(code = 403, message = \"User was unable to execute current operation on task with given id due to a no 'current status' match or insufficient permissions\")}",
          "package": "org.kie.server.remote.rest.jbpm",
          "classSimpleName": "UserTaskResource",
          "methodName": "release",
          "elementKind": "method",
          "justification": "JBPM-7542: Create better response for user without permissions to do"
        },
        {
          "code": "java.annotation.added",
          "package": "org.kie.server.remote.rest.jbpm",
          "elementKind": "method",
          "justification": "Improved KIE Server Swagger docs"
        },
        {
          "code": "java.annotation.attributeAdded",          
          "package": "org.kie.server.remote.rest.jbpm",
          "elementKind": "parameter",
          "justification": "Improved KIE Server Swagger docs"
        },
        {
          "code": "java.annotation.attributeValueChanged",          
          "package": "org.kie.server.remote.rest.jbpm",
          "elementKind": "method",
          "justification": "Improved KIE Server Swagger docs"
        },
        {
          "code": "java.annotation.added",
          "package": "org.kie.server.remote.rest.jbpm.admin",
          "elementKind": "method",
          "justification": "Improved KIE Server Swagger docs"
        },
        {
          "code": "java.annotation.attributeAdded",          
          "package": "org.kie.server.remote.rest.jbpm.admin",
          "elementKind": "parameter",
          "justification": "Improved KIE Server Swagger docs"
        },
        {
          "code": "java.annotation.attributeValueChanged",          
          "package": "org.kie.server.remote.rest.jbpm.admin",
          "elementKind": "method",
          "justification": "Improved KIE Server Swagger docs"
        }
      ]
    }
  }
}
